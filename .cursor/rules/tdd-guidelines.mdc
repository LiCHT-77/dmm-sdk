---
description:
globs:
alwaysApply: false
---
# AI駆動TDD支援ガイドライン
**このタスクはTDDで進めます。以下のルールに則りタスクを進めてください。**

## **完了条件（厳守）**
- テストのオールグリーン。**あなた自身でテストを実行**しオールグリーンになるまで繰り返します。

## TDD基本原則

*   **常にTDDサイクル（レッド・グリーン・リファクタリング）に従ってください。**
    *   **レッド:** 失敗するテストコードを最初に書く（または生成を依頼する）。
    *   **グリーン:** そのテストをパスする最小限のコードを実装する（または生成を依頼する）。
    *   **リファクタリング:** テストが通る状態を維持しながらコードを改善する（または提案を依頼する）。
*   **テストコードは最重要のプロンプトです。** 提示されたテストコードの意図（仕様）を正確に理解し、それを満たすコード生成を最優先してください。
*   **テスト容易性を考慮してください。** テストしやすい、疎結合で凝集度の高いコードを生成するように努めてください。

## 各フェーズにおけるAIの役割

*   **レッドフェーズ:**
    *   ユーザーの指示（機能要件、仕様、エッジケース）に基づき、適切なテストコードを生成してください。
    *   テストフレームワーク（例: Vitest, Jest）を指定された場合はそれに従ってください。
    *   既存のテストコードがあれば、そのスタイルやパターンを踏襲してください (Few-shot Learning)。
*   **グリーンフェーズ:**
    *   提示された失敗するテストコードをパスするための**最小限の**実装コードを生成してください。
    *   エラーメッセージやコンテキストを考慮して修正案を提示してください。
*   **リファクターフェーズ:**
    *   コードの可読性、保守性、効率性を向上させるためのリファクタリング案を提案してください。
    *   リファクタリングによってテストが失敗しないことを保証するように努めてください。
    *   具体的な改善指示（例: DRY原則、特定デザインパターンの適用）があればそれに従ってください。

## プロンプトエンジニアリングのヒント

*   **具体性:** 期待する出力、フォーマット、制約条件を明確に指示してください。
*   **コンテキスト:** 関連するコードスニペット、ファイル、エラーメッセージ、仕様情報を提供してください。
*   **例示 (Few-shot):** 期待するコードのスタイルやパターンを示す例を提供してください。
*   **タスク分割:** 複雑な要求は、より小さなステップに分割して指示してください。
*   **思考プロセス (CoT):** 必要に応じて、「ステップバイステップで考えて」と指示し、推論過程を示させてください。

## 注意事項

*   **品質と正確性:** 生成したコードは完璧ではありません。常に人間のレビューとテストによる検証が必要です。バグや非効率なコードを含む可能性があります。
*   **セキュリティ:** 脆弱性を含むコードを生成しないよう注意してください。安全でない依存関係を提案しないでください。機密情報をプロンプトに含めないでください。
*   **著作権・ライセンス:** 生成したコードが既存のコード（特にOSS）と酷似していないか注意してください。ライセンス違反のリスクを考慮してください。
*   **倫理:** 学習データに由来するバイアスがないか注意してください。透明性と説明可能性を意識してください。
*   **過信しない:** AIの提案を鵜呑みにせず、常に批判的な視点で評価してください。最終的な責任は人間が負います。
